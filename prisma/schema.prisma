// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  password String
  name     String
  cpf      String     @unique @db.Char(11)
  Client   Client[]
  Movie    Movie[]
  Rental   Rental[]
  Actor    Actor[]
  Director Director[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       Int      @unique
  address   String
  phone     String
  email     String   @unique
  Rental    Rental[]
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Actor {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  dateOfBirth DateTime
  nationality String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Director {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  dateOfBirth DateTime
  nationality String
  Movie       Movie[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Movie {
  id         Int      @id @default(autoincrement())
  title      String
  release    Int
  imageUrl   String
  synopsys   String
  cast       String[]
  actorId    Int[]
  director   Director @relation(fields: [directorId], references: [id])
  directorId Int
  category   String
  value      Decimal
  copies     Int
  Rental     Rental[]
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum RentalSituation {
  regular
  atrasado
  entregue
}

model Rental {
  id             Int             @id @default(autoincrement())
  client         Client          @relation(fields: [clientId], references: [id])
  clientId       Int
  movie          Movie           @relation(fields: [movieId], references: [id])
  movieId        Int
  rentDate       DateTime
  returnDate     DateTime
  returnDeadLine DateTime
  valueFine      Decimal
  amount         Decimal
  situation      RentalSituation
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  cretedAt       DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}
