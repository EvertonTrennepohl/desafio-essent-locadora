// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

//datasource db {
//  provider = "postgresql"
//  url      = env("POSTGRES_PRISMA_URL")
//}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  password String
  name     String
  cpf      String     @unique @db.Char(11)
  Client   Client[]
  Movie    Movie[]
  Rental   Rental[]
  Actor    Actor[]
  Director Director[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       Int      @unique
  address   String
  phone     String
  email     String   @unique
  Rental    Rental[]
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Actor {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  dateOfBirth    DateTime
  nationality    String
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  ActorsOnMovies ActorsOnMovies[]
}

model Director {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  dateOfBirth DateTime
  nationality String
  Movie       Movie[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model ActorsOnMovies {
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([actorId, movieId])
}

model Movie {
  id             Int              @id @default(autoincrement())
  title          String
  release        Int
  imageUrl       String
  synopsys       String
  cast           String[]
  actorId        Int[]
  director       Director         @relation(fields: [directorId], references: [id])
  directorId     Int
  category       String
  value          Decimal
  copies         Int
  Rental         Rental[]
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ActorsOnMovies ActorsOnMovies[]
}

enum RentalSituation {
  regular
  atrasado
  entregue
}

model Rental {
  id             Int             @id @default(autoincrement())
  client         Client          @relation(fields: [clientId], references: [id])
  clientId       Int
  movie          Movie           @relation(fields: [movieId], references: [id])
  movieId        Int
  rentDate       DateTime
  returnDate     DateTime
  returnDeadLine DateTime
  valueFine      Decimal
  amount         Decimal
  situation      RentalSituation
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  cretedAt       DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}
